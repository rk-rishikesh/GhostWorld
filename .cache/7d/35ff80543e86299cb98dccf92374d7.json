{"id":"pZ6P","dependencies":[{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\@ethereumjs\\tx\\dist.browser\\types.js.map","includedInParent":true,"mtime":1648228007757},{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\@ethereumjs\\tx\\src\\types.ts","includedInParent":true,"mtime":1648228007931},{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\package.json","includedInParent":true,"mtime":1648301114916},{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\@ethereumjs\\tx\\package.json","includedInParent":true,"mtime":1648228007626},{"name":"ethereumjs-util","loc":{"line":4,"column":32,"index":208},"parent":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\@ethereumjs\\tx\\dist.browser\\types.js","resolved":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereumjs-util\\dist.browser\\index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.N_DIV_2=exports.isAccessList=exports.isAccessListBuffer=exports.Capability=void 0;var e,f=require(\"ethereumjs-util\");function s(e){if(0===e.length)return!0;var f=e[0];return!!Array.isArray(f)}function t(e){return!s(e)}!function(e){e[e.EIP155ReplayProtection=155]=\"EIP155ReplayProtection\",e[e.EIP1559FeeMarket=1559]=\"EIP1559FeeMarket\",e[e.EIP2718TypedTransaction=2718]=\"EIP2718TypedTransaction\",e[e.EIP2930AccessLists=2930]=\"EIP2930AccessLists\"}(e=exports.Capability||(exports.Capability={})),exports.isAccessListBuffer=s,exports.isAccessList=t,exports.N_DIV_2=new f.BN(\"7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\",16);"},"sourceMaps":{"js":{"mappings":[{"source":"../src/types.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":158}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":162}},{"source":"../src/types.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":164}},{"source":"../src/types.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":166}},{"source":"../src/types.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":174}},{"source":"../src/types.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":1,"column":193}},{"source":"../src/types.ts","name":null,"original":{"line":82,"column":16},"generated":{"line":1,"column":202}},{"source":"../src/types.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":1,"column":204}},{"source":"../src/types.ts","name":null,"original":{"line":85,"column":2},"generated":{"line":1,"column":207}},{"source":"../src/types.ts","name":null,"original":{"line":85,"column":23},"generated":{"line":1,"column":210}},{"source":"../src/types.ts","name":null,"original":{"line":85,"column":6},"generated":{"line":1,"column":214}},{"source":"../src/types.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":1,"column":216}},{"source":"../src/types.ts","name":null,"original":{"line":86,"column":4},"generated":{"line":1,"column":223}},{"source":"../src/types.ts","name":null,"original":{"line":86,"column":11},"generated":{"line":1,"column":230}},{"source":"../src/types.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":1,"column":232}},{"source":"../src/types.ts","name":null,"original":{"line":88,"column":8},"generated":{"line":1,"column":236}},{"source":"../src/types.ts","name":null,"original":{"line":88,"column":20},"generated":{"line":1,"column":238}},{"source":"../src/types.ts","name":null,"original":{"line":88,"column":26},"generated":{"line":1,"column":240}},{"source":"../src/types.ts","name":null,"original":{"line":89,"column":2},"generated":{"line":1,"column":243}},{"source":"../src/types.ts","name":null,"original":{"line":89,"column":6},"generated":{"line":1,"column":251}},{"source":"../src/types.ts","name":null,"original":{"line":89,"column":12},"generated":{"line":1,"column":257}},{"source":"../src/types.ts","name":null,"original":{"line":89,"column":20},"generated":{"line":1,"column":265}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":1,"column":268}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":16},"generated":{"line":1,"column":277}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":29},"generated":{"line":1,"column":279}},{"source":"../src/types.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":1,"column":282}},{"source":"../src/types.ts","name":null,"original":{"line":96,"column":10},"generated":{"line":1,"column":289}},{"source":"../src/types.ts","name":null,"original":{"line":96,"column":29},"generated":{"line":1,"column":291}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":295}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":304}},{"source":"../src/types.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":307}},{"source":"../src/types.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":309}},{"source":"../src/types.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":311}},{"source":"../src/types.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":334}},{"source":"../src/types.ts","name":null,"original":{"line":16,"column":2},"generated":{"line":1,"column":339}},{"source":"../src/types.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":364}},{"source":"../src/types.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":366}},{"source":"../src/types.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":368}},{"source":"../src/types.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":385}},{"source":"../src/types.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":391}},{"source":"../src/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":410}},{"source":"../src/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":412}},{"source":"../src/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":414}},{"source":"../src/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":438}},{"source":"../src/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":1,"column":444}},{"source":"../src/types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":470}},{"source":"../src/types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":472}},{"source":"../src/types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":474}},{"source":"../src/types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":493}},{"source":"../src/types.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":499}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":520}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":521}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":523}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":531}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":544}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":1,"column":552}},{"source":"../src/types.ts","name":null,"original":{"line":11,"column":22},"generated":{"line":1,"column":563}},{"source":"../src/types.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":1,"column":568}},{"source":"../src/types.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":1,"column":576}},{"source":"../src/types.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":1,"column":595}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":1,"column":597}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":1,"column":605}},{"source":"../src/types.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":1,"column":618}},{"source":"../src/types.ts","name":null,"original":{"line":270,"column":13},"generated":{"line":1,"column":620}},{"source":"../src/types.ts","name":null,"original":{"line":270,"column":13},"generated":{"line":1,"column":628}},{"source":"../src/types.ts","name":null,"original":{"line":270,"column":23},"generated":{"line":1,"column":636}},{"source":"../src/types.ts","name":null,"original":{"line":270,"column":27},"generated":{"line":1,"column":640}},{"source":"../src/types.ts","name":null,"original":{"line":270,"column":27},"generated":{"line":1,"column":642}},{"source":"../src/types.ts","name":null,"original":{"line":271,"column":2},"generated":{"line":1,"column":645}},{"source":"../src/types.ts","name":null,"original":{"line":272,"column":2},"generated":{"line":1,"column":712}}],"sources":{"../src/types.ts":"import { BN, AddressLike, BNLike, BufferLike, PrefixedHexString } from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { default as Transaction } from './legacyTransaction'\nimport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nimport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\n\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nexport enum Capability {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  EIP155ReplayProtection = 155,\n\n  /**\n   * Tx supports EIP-1559 gas fee market mechansim\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n  EIP1559FeeMarket = 1559,\n\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n  EIP2718TypedTransaction = 2718,\n\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n  EIP2930AccessLists = 2930,\n}\n\n/**\n * The options for initializing a {@link Transaction}.\n */\nexport interface TxOptions {\n  /**\n   * A {@link Common} object defining the chain and hardfork for the transaction.\n   *\n   * Object will be internally copied so that tx behavior don't incidentally\n   * change on future HF changes.\n   *\n   * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\n   *\n   * Current default hardfork: `istanbul`\n   */\n  common?: Common\n  /**\n   * A transaction object by default gets frozen along initialization. This gives you\n   * strong additional security guarantees on the consistency of the tx parameters.\n   * It also enables tx hash caching when the `hash()` method is called multiple times.\n   *\n   * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\n   * add aditional properties - it is strongly encouraged that you do the freeze yourself\n   * within your code instead.\n   *\n   * Default: true\n   */\n  freeze?: boolean\n}\n\n/*\n * Access List types\n */\n\nexport type AccessListItem = {\n  address: PrefixedHexString\n  storageKeys: PrefixedHexString[]\n}\n\n/*\n * An Access List as a tuple of [address: Buffer, storageKeys: Buffer[]]\n */\nexport type AccessListBufferItem = [Buffer, Buffer[]]\nexport type AccessListBuffer = AccessListBufferItem[]\nexport type AccessList = AccessListItem[]\n\nexport function isAccessListBuffer(\n  input: AccessListBuffer | AccessList\n): input is AccessListBuffer {\n  if (input.length === 0) {\n    return true\n  }\n  const firstItem = input[0]\n  if (Array.isArray(firstItem)) {\n    return true\n  }\n  return false\n}\n\nexport function isAccessList(input: AccessListBuffer | AccessList): input is AccessList {\n  return !isAccessListBuffer(input) // This is exactly the same method, except the output is negated.\n}\n\n/**\n * Encompassing type for all transaction types.\n *\n * Note that this also includes legacy txs which are\n * referenced as {@link Transaction} for compatibility reasons.\n */\nexport type TypedTransaction =\n  | Transaction\n  | AccessListEIP2930Transaction\n  | FeeMarketEIP1559Transaction\n\n/**\n * Legacy {@link Transaction} Data\n */\nexport type TxData = {\n  /**\n   * The transaction's nonce.\n   */\n  nonce?: BNLike\n\n  /**\n   * The transaction's gas price.\n   */\n  gasPrice?: BNLike\n\n  /**\n   * The transaction's gas limit.\n   */\n  gasLimit?: BNLike\n\n  /**\n   * The transaction's the address is sent to.\n   */\n  to?: AddressLike\n\n  /**\n   * The amount of Ether sent.\n   */\n  value?: BNLike\n\n  /**\n   * This will contain the data of the message or the init of a contract.\n   */\n  data?: BufferLike\n\n  /**\n   * EC recovery ID.\n   */\n  v?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  r?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  s?: BNLike\n\n  /**\n   * The transaction type\n   */\n\n  type?: BNLike\n}\n\n/**\n * {@link AccessListEIP2930Transaction} data.\n */\nexport interface AccessListEIP2930TxData extends TxData {\n  /**\n   * The transaction's chain ID\n   */\n  chainId?: BNLike\n\n  /**\n   * The access list which contains the addresses/storage slots which the transaction wishes to access\n   */\n  accessList?: AccessListBuffer | AccessList\n}\n\n/**\n * {@link FeeMarketEIP1559Transaction} data.\n */\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  /**\n   * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\n   * transactions and should always be undefined for this specific transaction type.\n   */\n  gasPrice?: never\n  /**\n   * The maximum inclusion fee per gas (this fee is given to the miner)\n   */\n  maxPriorityFeePerGas?: BNLike\n  /**\n   * The maximum total fee\n   */\n  maxFeePerGas?: BNLike\n}\n\n/**\n * Buffer values array for a legacy {@link Transaction}\n */\nexport type TxValuesArray = Buffer[]\n\n/**\n * Buffer values array for an {@link AccessListEIP2930Transaction}\n */\nexport type AccessListEIP2930ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\n/**\n * Buffer values array for a {@link FeeMarketEIP1559Transaction}\n */\nexport type FeeMarketEIP1559ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\ntype JsonAccessListItem = { address: string; storageKeys: string[] }\n\n/**\n * Generic interface for all tx types with a\n * JSON representation of a transaction.\n *\n * Note that all values are marked as optional\n * and not all the values are present on all tx types\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\n */\nexport interface JsonTx {\n  nonce?: string\n  gasPrice?: string\n  gasLimit?: string\n  to?: string\n  data?: string\n  v?: string\n  r?: string\n  s?: string\n  value?: string\n  chainId?: string\n  accessList?: JsonAccessListItem[]\n  type?: string\n  maxPriorityFeePerGas?: string\n  maxFeePerGas?: string\n}\n\n/**\n * A const defining secp256k1n/2\n */\nexport const N_DIV_2 = new BN(\n  '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n  16\n)\n"},"lineCount":null}},"error":null,"hash":"5787bd127ebef8cd3b4f725cb0dce99c","cacheData":{"env":{}}}