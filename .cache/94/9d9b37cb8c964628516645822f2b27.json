{"id":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","dependencies":[{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\package.json","includedInParent":true,"mtime":1648301114916},{"name":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\package.json","includedInParent":true,"mtime":1648228038019},{"name":"ethers/utils/abi-coder","loc":{"line":1,"column":32,"index":32},"parent":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\src\\FunctionDecoder.js","resolved":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\node_modules\\ethers\\utils\\abi-coder.js"},{"name":"ethers/utils/interface","loc":{"line":2,"column":26,"index":85},"parent":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\src\\FunctionDecoder.js","resolved":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\node_modules\\ethers\\utils\\interface.js"},{"name":"./decodeTransaction.js","loc":{"line":3,"column":23,"index":135},"parent":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\src\\FunctionDecoder.js","resolved":"C:\\Users\\rishi\\ethernal\\GhostWorld\\node_modules\\ethereum-tx-decoder\\src\\decodeTransaction.js"}],"generated":{"js":"var {defaultAbiCoder} = require('ethers/utils/abi-coder');\nvar {Interface} = require('ethers/utils/interface');\nvar decodeTx = require('./decodeTransaction.js');\n\nmodule.exports = function FunctionDecoder(iface) {\n  if (!(this instanceof FunctionDecoder)) { throw new Error('missing new'); }\n\n  if (!(Interface.isInterface(iface))) { iface = new Interface(iface); }\n\n  var functions = {};\n\n  for (var fnName in iface.functions) {\n    var fnInfo = iface.functions[fnName];\n    functions[fnInfo.sighash] = fnName;\n  };\n\n  this.decodeFn = function(data) {\n    var sighash = data.substring(0, 10);\n    var raw_params = '0x'+data.substring(10);\n\n    var fnName = functions[sighash];\n    var fnInfo = iface.functions[fnName];\n\n    var result = defaultAbiCoder.decode(\n      fnInfo.inputs,\n      raw_params\n    );\n\n    result.signature = fnInfo.signature;\n    result.sighash = fnInfo.sighash;\n\n    return result;\n  }\n\n  this.decodeFnFromTx = function(raw_tx) {\n    var decodedTx = decodeTx(raw_tx);\n    return this.decodeFn(decodedTx.data);\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/ethereum-tx-decoder/src/FunctionDecoder.js":"var {defaultAbiCoder} = require('ethers/utils/abi-coder');\nvar {Interface} = require('ethers/utils/interface');\nvar decodeTx = require('./decodeTransaction.js');\n\nmodule.exports = function FunctionDecoder(iface) {\n  if (!(this instanceof FunctionDecoder)) { throw new Error('missing new'); }\n\n  if (!(Interface.isInterface(iface))) { iface = new Interface(iface); }\n\n  var functions = {};\n\n  for (var fnName in iface.functions) {\n    var fnInfo = iface.functions[fnName];\n    functions[fnInfo.sighash] = fnName;\n  };\n\n  this.decodeFn = function(data) {\n    var sighash = data.substring(0, 10);\n    var raw_params = '0x'+data.substring(10);\n\n    var fnName = functions[sighash];\n    var fnInfo = iface.functions[fnName];\n\n    var result = defaultAbiCoder.decode(\n      fnInfo.inputs,\n      raw_params\n    );\n\n    result.signature = fnInfo.signature;\n    result.sighash = fnInfo.sighash;\n\n    return result;\n  }\n\n  this.decodeFnFromTx = function(raw_tx) {\n    var decodedTx = decodeTx(raw_tx);\n    return this.decodeFn(decodedTx.data);\n  }\n}\n"},"lineCount":40}},"error":null,"hash":"37671faf46ead5603c0edaa0edb89d8e","cacheData":{"env":{}}}